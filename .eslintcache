[{"D:\\Users\\ASUS\\Desktop\\side-project\\video-record\\src\\index.js":"1","D:\\Users\\ASUS\\Desktop\\side-project\\video-record\\src\\App.js":"2","D:\\Users\\ASUS\\Desktop\\side-project\\video-record\\src\\reportWebVitals.js":"3","D:\\Users\\ASUS\\Desktop\\side-project\\video-record\\src\\utils\\format.js":"4","D:\\Users\\ASUS\\Desktop\\side-project\\video-record\\src\\settings\\settings.js":"5"},{"size":500,"mtime":1607409902572,"results":"6","hashOfConfig":"7"},{"size":9028,"mtime":1613577634728,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1607409902572,"results":"9","hashOfConfig":"7"},{"size":353,"mtime":1613575258232,"results":"10","hashOfConfig":"7"},{"size":84,"mtime":1613575201773,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1yv4l1p",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"D:\\Users\\ASUS\\Desktop\\side-project\\video-record\\src\\index.js",[],["25","26"],"D:\\Users\\ASUS\\Desktop\\side-project\\video-record\\src\\App.js",["27"],"import React, {Component} from 'react';\nimport utils from \"./utils/format\";\nimport settings from \"./settings/settings\";\nimport \"./index.css\";\n\nlet mediaRecorder;\nlet recordedBlobs = [];\nvar intervalID;\nvar times = false;\nvar TheStream = null;\nvar recordLoadingID = '';\n\nconst initialState={\n  inputTimeState: false,\n  inputLengthState: false,\n  height: window.innerHeight,\n  recordLoading: false,\n};\nexport default class APP extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    document.addEventListener('resize', () => this.windowSize());\n    intervalID = window.setInterval(() => this.checkRecordTime(), 250);\n  }\n\n  windowSize = () => {\n    this.setState({height:window.innerHeight})\n  };\n\n  checkRecordTime = () => {\n    if (this.compareTime() && !times) {\n      times = true;\n      console.log(\"時間到 開起相機\");\n      this.startButton.disabled = true;\n      setTimeout(() => this.handleStartCamera(), 100);\n      console.log(\"一秒後，開始錄製 \");\n      setTimeout(() => this.startRecordVideo(\"Start Recording\"), 1000);\n    }\n  };\n\n  compareTime = () => {\n    if(!!(this.setUpLength && this.setUpLength.value)){\n      this.setState({inputLengthState:true})\n    }\n    if(!!(this.setUpTime && this.setUpTime.value)){\n      this.setState({inputTimeState:true})\n    }\n    if (utils.getCurTime() === (!!this.setUpTime &&this.setUpTime.value)) {\n      return true;\n    } else if (utils.getCurTime() === settings.DEFAULT_RECORD_TIME) {\n      return true;\n    }\n    return false;\n  };\n\n  handleStartCamera = () => {\n    const thisRef = this;\n    const constraints = {\n      video: {\n        width: 1280,\n        height: 720\n      }\n    };\n    this.recordButton.disabled = false;\n    if (null === TheStream) {\n      navigator.mediaDevices\n        .getUserMedia(constraints)\n        .then(function (mediaStream) {\n          TheStream = mediaStream;\n          thisRef.init(mediaStream);\n        })\n        .catch(function (err) {\n          console.log(\"Unable to access camera: \" + err);\n        });\n    } else {\n      alert(\"Your browser does not support media devices.\");\n\n      return;\n    }\n  };\n\n  startRecordVideo = () => {\n    console.log(\"開始錄製\");\n    this.setUpTime.disabled = true;\n    this.setUpLength.disabled = true;\n    setTimeout(() => this.handleOpenCamera(\"Start Recording\"), 1000);\n  };\n\n  stopCameraRedDot = () => {\n    this.setUpTime.disabled = false;\n    this.setUpLength.disabled = false;\n    this.stopCamera.disabled = true;\n    clearInterval(intervalID);\n    if (null != TheStream) {\n      TheStream.getTracks().map((track) => track.stop());\n\n      this.gumVideo.srcObject = null;\n      TheStream = null;\n    }\n  };\n\n  handleOpenCamera = (e) => {\n    if (e === \"Start Recording\") {\n      this.startRecording();\n      this.gumVideo.style.display = 'block'\n    }\n    if (this.setUpLength.value !== \"\" && Math.sign(parseInt(this.setUpLength.value) === 1 && parseInt(this.setUpLength.value) >= 1)) {\n      settings.RECORD_LENGTH = parseInt(this.setUpLength.value) * 60000;\n    }\n    setTimeout(() => this.stopRecording(), settings.RECORD_LENGTH);\n  };\n\n  handleDataAvailable = (event) => {\n    if (event.data && event.data.size > 0) {\n      recordedBlobs.push(event.data);\n    }\n  };\n\n  handlePlayButton = (e) => {\n    const superBuffer = new Blob(recordedBlobs, { type: \"video/webm\" });\n    this.recordVideo.src = null;\n    this.recordVideo.srcObject = null;\n    this.recordVideo.src = window.URL.createObjectURL(superBuffer);\n    this.recordVideo.controls = true;\n    this.recordVideo.play();\n  };\n\n  handleDownloadButton = () => {\n    const blob = new Blob(recordedBlobs, { type: \"video/webm\" });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    this.gumVideo.style.display = 'none';\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = \"video-record.webm\";\n    document.body.appendChild(a);\n    a.click();\n    this.downloadButton.disabled = true;\n    this.playButton.disabled = true;\n    setTimeout(() => {\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }, 100);\n  };\n\n  handleSuccess = async (stream) => {\n    this.recordButton.disabled = false;\n    window.stream = stream;\n    TheStream = stream;\n    this.gumVideo.srcObject = stream;\n  };\n\n  stopRecording = () => {\n    mediaRecorder.stop();\n    this.recordButton.textContent = \"Start Recording\";\n    this.recordButton.disabled = true;\n    this.playButton.disabled = false;\n    this.downloadButton.disabled = false;\n    console.log(\"關閉相機\");\n    clearInterval(recordLoadingID);\n    setTimeout(() => this.stopCameraRedDot(), 500);\n    console.log(\"一秒後，下載影片\");\n    setTimeout(() => this.handleDownloadButton(), 1000);\n  };\n\n  startRecording = () => {\n    let options = { mimeType: \"video/webm;codecs=vp9,opus\" };\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n      console.error(`${options.mimeType} is not supported`);\n      options = { mimeType: \"video/webm;codecs=vp8,opus\" };\n      if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n        console.error(`${options.mimeType} is not supported`);\n        options = { mimeType: \"video/webm\" };\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n          console.error(`${options.mimeType} is not supported`);\n          options = { mimeType: \"\" };\n        }\n      }\n    }\n\n    try {\n      mediaRecorder = new MediaRecorder(window.stream, options);\n    } catch (e) {\n      console.error(\"Exception while creating MediaRecorder:\", e);\n      return;\n    }\n\n    console.log(\n      \"Created MediaRecorder\",\n      mediaRecorder,\n      \"with options\",\n      options\n    );\n    this.recordButton.textContent = \"Recording...\";\n    let thisRecordLoadingID_Ref = this.recordButton;\n    recordLoadingID = setInterval(()=>{thisRecordLoadingID_Ref.disabled = !thisRecordLoadingID_Ref.disabled},250)\n    this.playButton.disabled = true;\n    this.downloadButton.disabled = true;\n    mediaRecorder.onstop = (event) => {\n      console.log(\"Recorder stopped: \", event);\n      console.log(\"Recorded Blobs: \", recordedBlobs);\n    };\n    mediaRecorder.ondataavailable = this.handleDataAvailable;\n    mediaRecorder.start();\n  };\n\n  init = async (mediaStream) => {\n    const thisRef = this;\n    thisRef.handleSuccess(mediaStream);\n  };\n\n  render() {\n    return (\n      <div style={{backgroundColor: '#ffffff'}}>\n        <div style={{backgroundColor: 'darkcyan',color: '#000000', width:'50%',minWidth: '330px' ,fontSize:'32px', margin:'0px auto'}} >Video Record</div>\n        <div id=\"container\" style={{backgroundColor: '#e0e0e0',width:'50%',minWidth: '330px',height: this.state.height, margin:'0px auto'}}>\n          <div style={{borderRadius:'5px', display: 'flex',border: '1px solid #2371FA' ,backgroundColor: this.state.inputTimeState ? '#87cefa' :'#b7bbbc'}}>\n            <label>請選擇錄製時間(default 19:40:00): </label>\n            <input type=\"time\" id=\"appt\" ref={(time) => (this.setUpTime = time)} name=\"appt\" step=\"1\" style={{verticalAlign: 'text-bottom'}}/>\n            {this.state.inputTimeState && <img src={require('./images/checked.png')}  style={{padding:' 3px', width:'20px',zIndex: 100, verticalAlign: 'bottom'}} alt=\"Background\"/>}\n          </div>\n          <div style={{margin:'2.5px 0px', display: 'flex' ,borderRadius:'5px',border: '1px solid #2371FA' ,backgroundColor: this.state.inputLengthState? '#87cefa' :'#b7bbbc'}}>\n            <label>請選擇錄製長度(default 20min): </label>\n            <input type=\"number\" id=\"appt\" ref={(length) => (this.setUpLength = length)} name=\"appt\" style={{verticalAlign: 'text-bottom'}} step=\"1\" min=\"1\"/>\n            {this.state.inputLengthState && <img src={require('./images/checked.png')} style={{padding:' 3px', width:'20px', zIndex: 100, verticalAlign: 'bottom'}} alt=\"Background\"/>}\n          </div>\n          <video id=\"gum\" ref={(gum) => (this.gumVideo = gum)} autoPlay={true} muted download={\"video-record\"} style={{ transform: 'scaleX(-1)',display: \"none\", width:'50%', margin:'0 auto' }}/>\n          <video id=\"recorded\" ref={(record) => (this.recordVideo = record)} style={{ display: \"none\", width:'50%', margin:'0 auto' }}/>\n          <div>\n            <button id=\"start\" ref={(start) => (this.startButton = start)} disabled>Start camera</button>\n            <button id=\"record\" ref={(button) => (this.recordButton = button)} disabled>\n              Start Recording\n            </button>\n            <button id=\"play\" ref={(play) => (this.playButton = play)} disabled>Play</button>\n            <button id=\"download\" ref={(download) => (this.downloadButton = download)} disabled>Download</button>\n            <button id=\"stop\" ref={(stop) => (this.stopCamera = stop)} onClick={this.stopCamera} disabled>Stop Camera</button>\n          </div>\n          <div>\n            <span id=\"errorMsg\" ref={(error) => (this.errorMsgElement = error)}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","D:\\Users\\ASUS\\Desktop\\side-project\\video-record\\src\\reportWebVitals.js",[],"D:\\Users\\ASUS\\Desktop\\side-project\\video-record\\src\\utils\\format.js",[],"D:\\Users\\ASUS\\Desktop\\side-project\\video-record\\src\\settings\\settings.js",["28"],"export default {\r\n  RECORD_LENGTH : 1200000,\r\n  DEFAULT_RECORD_TIME : \"19:40:00\",\r\n}",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":16,"nodeType":"35","messageId":"36","endLine":1,"endColumn":25},{"ruleId":"37","severity":1,"message":"38","line":1,"column":1,"nodeType":"39","endLine":4,"endColumn":2},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]